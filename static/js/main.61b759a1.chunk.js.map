{"version":3,"sources":["Components/Header/Header.js","Components/WeatherCard/WeatherCard.js","Components/Wrapper/Wrapper.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","WeatherCard","text","this","props","animation","animationIn","isVisible","Component","Wrapper","children","TwitterCard","href","target","App","findIP","console","log","process","axios","get","then","res","setState","city","data","callWeatherAPI","state","catch","error","weather_URL","contextualMessaging","list","main","temp","isHot","isOK","isCold","temperature","card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+SAceA,G,MAXA,kBACX,yBAAKC,UAAU,sCACX,wBAAIA,UAAU,cAAd,2BAGA,yBAAKA,UAAU,aACX,2D,QCJSC,G,8KAEb,IAAIC,EAAOC,KAAKC,MAAMF,KAClBG,EAAYF,KAAKC,MAAMC,UAC3B,OACI,yBAAKL,UAAU,YACX,kBAAC,WAAD,CAAUM,YAAaD,EAAWE,WAAW,GACzC,yBAAKP,UAAU,gBACX,yBAAKA,UAAU,qBACX,4BAAKE,W,GATQM,cCS1BC,G,OATC,SAAAL,GAAK,OACjB,yBAAKJ,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACVI,EAAMM,cCLAC,G,8KAEf,OACI,yBAAKX,UAAU,mBACP,8FAEA,0CACgB,uBAAGY,KAAK,mCAAmCC,OAAO,UAAlD,WADhB,OAEQ,uBAAGD,KAAK,sBAAsBC,OAAO,UAArC,yB,GAReL,c,iCC0F5BM,E,kDAlFb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAiBRW,OAAS,WACPC,QAAQC,IAAIC,oCAEZC,IAAMC,IADK,4EAERC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACC,KAAMF,EAAIG,KAAKD,OAC9B,EAAKE,eAAe,EAAKC,MAAMH,SAEhCI,OAAM,SAAAC,GACL,EAAKN,SAAS,CAACM,cA3BF,EAgCnBH,eAAiB,SAAAF,GAEf,IAAIM,EAAc,iHAA4HN,EAC9IL,IAAMC,IAAIU,GACPT,MAAK,SAAAC,GACJ,EAAKS,oBAAoBT,EAAIG,KAAKO,KAAK,GAAGC,KAAKC,SAEhDN,OAAM,SAAAC,GACL,EAAKN,SAAS,CAACM,cAxCF,EA6CnBE,oBAAsB,SAAAG,GAChBA,EAAK,GACP,EAAKX,SAAS,CAACY,OAAO,EAAM9B,UAAW,UAChC,IAAI6B,GAAM,GACjB,EAAKX,SAAS,CAACa,MAAM,EAAM/B,UAAW,SAC/B6B,EAAK,IACZ,EAAKX,SAAS,CAACc,QAAQ,EAAMhC,UAAW,YAjD1C,EAAKsB,MAAQ,CACTW,YAAa,GACbd,KAAK,GACLnB,UAAW,GACX8B,OAAO,EACPC,MAAM,EACNC,QAAQ,GARK,E,0LAcXlC,KAAKY,S,qIAyCX,IAAIwB,EAcJ,OAbIpC,KAAKwB,MAAMQ,MAEbI,EAAO,kBAAC,EAAD,CAAarC,KAAK,mBAAmBG,UAAWF,KAAKwB,MAAMtB,YAE3DF,KAAKwB,MAAMS,KAElBG,EAAO,kBAAC,EAAD,CAAarC,KAAK,kBAAkBG,UAAWF,KAAKwB,MAAMtB,YAE1DF,KAAKwB,MAAMU,SAElBE,EAAO,kBAAC,EAAD,CAAarC,KAAK,oBAAoBG,UAAWF,KAAKwB,MAAMtB,aAInE,yBAAKL,UAAU,OACf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACKuC,GAEL,kBAAC,EAAD,W,GA5EU/B,aCCEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAM0B,a","file":"static/js/main.61b759a1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n    <div className=\"container-fluid align-items-center\">\n        <h1 className=\"card-title\">\n            What's it like outside?\n        </h1>\n        <div className=\"card-body\">\n            <p>A contextual weather app</p>    \n        </div>\n  </div>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport {Animated} from \"react-animated-css\";\nimport \"./WeatherCard.css\";\n\n\nexport default class WeatherCard extends Component {\n    render () {\n        let text = this.props.text;\n        let animation = this.props.animation;\n        return (\n            <div className=\"col-sm-8\">\n                <Animated animationIn={animation} isVisible={true}> \n                    <div className=\"weather-card\">\n                        <div className=\"weather-card-body\"> \n                            <h1>{text}</h1>\n                        </div>\n                    </div>\n                </Animated>\n            </div>\n        )\n    }\n}\n\n\n","  \nimport React from \"react\";\nimport \"./Wrapper.css\";\n\n//stateless component\nconst Wrapper = props => \n    <div className=\"wrapper\">\n        <div className=\"container\">\n            <div className=\"row\">\n                {props.children}\n            </div>\n        </div>\n    </div>\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport \"./Footer.css\";\n\n\n  export default class TwitterCard extends Component {\n    render () {\n        return (\n            <div className=\"footer col-sm-8\">\n                    <p>\n                        App Developed by Villy Devlioti an amateur full stack developer</p>\n                    <p>\n                        Checkout my <a href=\"https://github.com/VillyDevlioti\" target=\"_blank\">GitHub </a> \n                        and <a href=\"https://fewl.agency\" target=\"_blank\">Company Website</a> \n                    </p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Header from \"./Components/Header/Header\";\nimport WeatherCard from \"./Components/WeatherCard/WeatherCard\";\nimport Wrapper from \"./Components/Wrapper/Wrapper\";\nimport Footer from \"./Components/Footer/Footer\";\nimport './App.css';\n//import ReactWeather from 'react-open-weather';\n//Optional include of the default css styles\nimport 'react-open-weather/lib/css/ReactWeather.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        temperature: \"\",\n        city:\"\", \n        animation: \"\",\n        isHot: false,\n        isOK: false,\n        isCold: false\n    };\n  }\n\n  async componentDidMount() {\n    //Initializing stuff\n    await this.findIP();\n  }\n\n  //this function autodetects IP and location\n  findIP = () => {\n    console.log(process.env.REACT_APP_IPSTACK_ACCESS_KEY)\n    let IP_URL='http://api.ipstack.com/check?access_key='+process.env.REACT_APP_IPSTACK_ACCESS_KEY\n    axios.get(IP_URL)\n      .then(res => {\n        this.setState({city: res.data.city})\n        this.callWeatherAPI(this.state.city); \n      })\n      .catch(error => {\n        this.setState({error})\n      })\n  }\n\n  //this function finds weather information based on your location\n  callWeatherAPI = city =>\n  {\n    let weather_URL = 'http://api.openweathermap.org/data/2.5/forecast?appid='+process.env.REACT_APP_OPENWEATHER_APPID+'&lang=en&units=metric&q='+city\n    axios.get(weather_URL)  \n      .then(res => {\n        this.contextualMessaging(res.data.list[0].main.temp)\n      })\n      .catch(error => {\n        this.setState({error})\n      });\n  }\n\n  //this function defines weather if f*cking hot, cold or okay outside\n  contextualMessaging = temp => {\n    if (temp>25)\n      this.setState({isHot: true, animation: \"flash\"})\n    else if (15<=temp<=25)\n      this.setState({isOK: true, animation: \"tada\"})\n    else if (temp<15)\n      this.setState({isCold: true, animation: \"shakeX\"})\n  }\n\n  render() {\n    let card;\n    if (this.state.isHot)\n    {\n      card = <WeatherCard text=\"It's Fucking Hot\" animation={this.state.animation}/>\n    }\n    else if (this.state.isOK)\n    {\n      card = <WeatherCard text=\"It's Fucking OK\" animation={this.state.animation}/>\n    }\n    else if (this.state.isCold)\n    {\n      card = <WeatherCard text=\"It's Fucking Cold\" animation={this.state.animation}/>\n    }\n\n    return (\n      <div className=\"App\">\n      <Wrapper>\n        <Header />\n            {card}\n        </Wrapper>\n        <Footer />\n    </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}